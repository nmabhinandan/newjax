{"version":3,"sources":["newjax.js"],"names":[],"mappings":";;;;;;IAAqB,MAAM;AACd,WADQ,MAAM,CACb,GAAG,EAAE;0BADE,MAAM;;AAEvB,QAAI,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE;AACvB,UAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACf,UAAI,CAAC,OAAO,GAAG,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;AACzC,UAAI,CAAC,EAAE,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAA,AAAC,EAAE;AAClD,YAAI,CAAC,cAAc,EAAE,CAAC;OACvB;KACF,MAAM;AACL,YAAM,IAAI,SAAS,CAAC,mCAAmC,CAAC,CAAC;KAC1D;GACF;;eAXkB,MAAM;;WAaX,0BAAG;;;4BACN,CAAC;AACR,YAAI,EAAE,GAAG,MAAK,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC9B,UAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAC,CAAC,EAAK;AAClC,cAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;AAClB,mBAAO;WACR;AACD,cAAI,KAAK,CAAC,cAAc,EAAE;AACxB,iBAAK,CAAC,cAAc,EAAE,CAAC;WACxB,MAAM;AACL,iBAAK,CAAC,WAAW,GAAG,KAAK,CAAC;WAC3B;;AAED,gBAAK,MAAM,CAAC,EAAE,CAAC,CAAC;SACjB,CAAC,CAAC;;;AAbL,WAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;cAArC,CAAC;OAcT;KACF;;;WAEK,gBAAC,OAAO,EAAE;AACd,UAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;AACnB,WAAK,CAAC,OAAO,CAAC,IAAI,EAAE;AAClB,cAAM,EAAE,KAAK;AACb,eAAO,EAAE;AACP,kBAAQ,EAAE,IAAI;SACf;OACF,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAK;AACpB,gBAAQ,CAAC,IAAI,EAAE,CAAC;OACjB,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,EAAK;AAChB,WAAG,CAAC,SAAS,GAAG,IAAI,CAAC;AACrB,eAAO;OACR,CAAC,CAAC;AACH,UAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,CAAC;KAC3D;;;WAEQ,mBAAC,GAAG,EAAE;AACb,YAAM,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;KAC3C;;;SAjDkB,MAAM","file":"newjax.js","sourcesContent":["export default class NewJax {\n  constructor(elm) {\n    if (elm && elm.nodeType) {\n      this.elm = elm;\n      this.anchors = elm.querySelectorAll('a');\n      if (!!(window.history && window.history.pushState)) {\n        this.registerEvents();\n      }\n    } else {\n      throw new TypeError('Invalid argument passed to NewJax');\n    }\n  }\n\n  registerEvents() {\n    for (let i = 0; i < this.anchors.length; i++) {\n      let el = this.anchors.item(i);\n      el.addEventListener('click', (e) => {\n        if (e.button === 0) {\n          return;\n        }\n        if (event.preventDefault) {\n          event.preventDefault();\n        } else {\n          event.returnValue = false;\n        }\n\n        this.handle(el);\n      });\n    }\n  }\n\n  handle(element) {\n    let elm = this.elm;\n    fetch(element.href, {\n      method: 'get',\n      headers: {\n        'X-PJAX': true\n      }\n    }).then((response) => {\n      response.text();\n    }).then((body) => {\n      elm.innerHTML = body;\n      return;\n    });\n    this.changeUrl(element.href.replace(/^.*\\/\\/[^\\/]+/, ''));\n  }\n\n  changeUrl(url) {\n    window.history.pushState(null, null, url);\n  }\n}\n"],"sourceRoot":"/source/"}